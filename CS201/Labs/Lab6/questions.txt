
Examine the output from eg1 and eg2, and understand eg.c, then answer
the questions below.  Each question is worth the same amount.  Each
question applies to an _unmodified_ eg.c, unless otherwise specified.

The output will look similar to the following (the memory addresses
will likely be different than what you see).  Line numbers have been
added here:
 
eg1:

 1  intarr[3] = 40, intarr+3 = 0xbffb2aac, *(intarr+3)= 40
 2  intptr[3] = 40, intptr+3 = 0xbffb2aac, *(intptr+3)= 40
 3  intarr[3] = 99, intarr+3 = 0xbffb2aac, *(intarr+3)= 99
 4  intptr[3] = 99, intptr+3 = 0xbffb2aac, *(intptr+3)= 99
 5  *(intarr+3) = 99, *intarr+3 = 13
 6  sizeof(intarr) = 20, sizeof(intptr) = 4
 7  string1 = 123456789, string2_ptr = 123456789
 8  strnlen(string1, STR_LEN+1) = 9,  strnlen(string2_ptr, STR_LEN+1) = 9
 9  sizeof(string1) = 10 sizeof(string2_ptr) = 4

eg2:

 1  intarr[3] = 40, intarr+3 = 0xbfb69ddc, *(intarr+3)= 40
 2  intptr[3] = 40, intptr+3 = 0x804a014, *(intptr+3)= 40
 3  intarr[3] = 99, intarr+3 = 0xbfb69ddc, *(intarr+3)= 99
 4  intptr[3] = 40, intptr+3 = 0x804a014, *(intptr+3)= 40
 5  *(intarr+3) = 99, *intarr+3 = 13
 6  sizeof(intarr) = 20, sizeof(intptr) = 4
 7  string1 = 123456789, string2_ptr = 123456789
 8  strnlen(string1, STR_LEN+1) = 9,  strnlen(string2_ptr, STR_LEN+1) = 9
 9  sizeof(string1) = 10 sizeof(string2_ptr) = 4

Questions

All answers should be 3-4 sentences at most.

  1. On line 4 of the output, why does intptr[3] have a different value
     for eg2 than for eg1?
----------------------------------------------------------------------
eg2 is compiled with the -DMAKECOPY flag, so when it's compiled the preprocessor includes the 'for' loop which assigns the values in the intarr into the dynamically allocated intptr array.
----------------------------------------------------------------------

  2. On line 5 of the output, *(intarr+3) = 99, but *intarr+3 = 13.
     Explain why this is so.
----------------------------------------------------------------------
The indirection operator has precedence over the addition operator, so in the latter case the value '3' is being added to the value stored at intarr[0], which is '10'.
----------------------------------------------------------------------

  3. On line 6 of the output, why does sizeof report different sizes?
     (The answer "because sizeof is given different variables" is
      not correct.  Hint:  see

       http://en.wikipedia.org/wiki/Sizeof#Using_sizeof_with_arrays
     )
----------------------------------------------------------------------
When you pass an array to the sizeof operator, it returns the size of memory used to store the whole array. When you pass a pointer to the sizeof operator, it returns the size of memory used to store the pointer.
----------------------------------------------------------------------

  4. strnlen and sizeof report different numbers for the strings
     Why?  (Hints:  man strnlen, and see the hint for question 3)
----------------------------------------------------------------------
For string1, sizeof returns the total size of the array, including the '\0' character. The strnlen function does not include the '\0' character. For string2, because it is a dynamically allocated array the name 'string2' only refers to the first element, so the sizeof operator returns the memory used to store each pointer.
----------------------------------------------------------------------

  5. Is the 10th element of the character array assigned a value? If
     so, what is that value?  (for marking this is considered 1 question)
----------------------------------------------------------------------
The 10th element is assigned a value of 0 by the memset call. 
----------------------------------------------------------------------

   (The following is used for questions 6-8.)
    Towards the end of eg.c, there are the two lines.

      string2_ptr = string1;
      intptr = intarr;

  6. Do these assignments make two copies of the contents of string1
     and intarr respectively, at different locations in memory?
----------------------------------------------------------------------
No, the two pointer arrays would store pointers that point to the values being stored in string1 and intarr.
----------------------------------------------------------------------

  7. After these assignments, what happened to the memory allocated
     with malloc for string2_ptr and intptr?
----------------------------------------------------------------------
The memory is not freed by the program, and would only be freed by the operating system after the process has terminated.
----------------------------------------------------------------------

  8. What should have been done to this memory before these two
     assignments, if the memory was no longer needed?
----------------------------------------------------------------------
It should have been freed with the two lines:
	free(string2_ptr);
	free(intptr);
----------------------------------------------------------------------

  9. Assume at the end of eg.c (right before the

       return 0;

     line) string1 were changed (e.g., string1[0]='A'). Would that
     change the contents of the memory to which string2_ptr
     points?

     This question is _NOT_ asking whether the value  of string2_ptr
     (i.e., the address stored in string2_ptr) is changed.

     Briefly explain your answer.
----------------------------------------------------------------------
Yes, string2_ptr points to the values stored in string1, so changing those values changes the contents of the memory that it points to.
----------------------------------------------------------------------

 10. Explain briefly the difference between variables a and b when
     declared as:

      int a[10][20];
      int* b[10];

     Assume they're declared inside a function.  This question has
     nothing to do with eg.c.
----------------------------------------------------------------------
"a" is a two dimensional array of int variables, stored in row-major order, so there would be 200 elements capable of storing int's. "b" is an array of pointers to int variables, so there would be 10 elements capabale of storing address values of memory storing int's.
----------------------------------------------------------------------
